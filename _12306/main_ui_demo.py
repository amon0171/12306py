# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
import sys
import time
import threading
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import os
from _12306.query_data import *
from login_12306.login_demo import Ui_Form
from _12306.buy_trick import APITool_Main


class MyThread(threading.Thread):
    def __init__(self, buy_trick_num, from_where, to_where, get_data, isStudent_trick):
        # super(MyThread, self).__init__()
        threading.Thread.__init__(self)
        self.buy_trick_num = buy_trick_num
        self.from_where = from_where
        self.to_where = to_where
        self.get_data = get_data
        self.isStudent_trick = isStudent_trick

    def run(self):
        APITool_Main.check_buy_trick(self.buy_trick_num, self.from_where, self.to_where, self.get_data,
                                     self.isStudent_trick)


# class MyThread2(threading.Thread):
#     def __init__(self):
#         super(MyThread, self).__init__()
#
#     def run(self):
#         t = threading.current_thread()
#         if not isStations():  # 判断是否有所有车站的文件，没有就下载，有就直接显示窗体
#             getStation()  # 下载所有车站文件
#             show_MainWindow()  # 调用显示窗体的方法
#         else:
#             show_MainWindow()  # 调用显示窗体的方法


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1135, 870)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(70, 70, 111, 41))
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(350, 70, 101, 41))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70, 40, 72, 15))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(350, 40, 72, 15))
        self.label_2.setObjectName("label_2")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(960, 240, 72, 15))
        self.label_6.setObjectName("label_6")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(630, 30, 71, 31))
        self.label_3.setObjectName("label_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(910, 270, 161, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.dateEdit = QtWidgets.QDateEdit(self.centralwidget)
        self.dateEdit.setGeometry(QtCore.QRect(630, 70, 121, 41))
        self.dateEdit.setObjectName("dateEdit")
        # -------显示时间是当前时间------------
        self.dateEdit.setDate(datetime.date.today())
        self.pushButton_select = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_select.setGeometry(QtCore.QRect(900, 630, 201, 91))
        self.pushButton_select.setObjectName("pushButton_select")
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(10, 280, 850, 500))
        self.tableView.setObjectName("tableView")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(900, 460, 201, 101))
        self.pushButton.setObjectName("pushButton")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 190, 891, 81))
        self.widget.setObjectName("widget")
        self.checkBox_K = QtWidgets.QCheckBox(self.widget)
        self.checkBox_K.setGeometry(QtCore.QRect(170, 10, 91, 19))
        self.checkBox_K.setObjectName("checkBox_K")
        self.checkBox_Z = QtWidgets.QCheckBox(self.widget)
        self.checkBox_Z.setGeometry(QtCore.QRect(90, 10, 91, 19))
        self.checkBox_Z.setObjectName("checkBox_Z")
        self.checkBox_G = QtWidgets.QCheckBox(self.widget)
        self.checkBox_G.setGeometry(QtCore.QRect(20, 10, 91, 19))
        self.checkBox_G.setObjectName("checkBox_G")
        self.checkBox_D = QtWidgets.QCheckBox(self.widget)
        self.checkBox_D.setGeometry(QtCore.QRect(240, 10, 91, 19))
        self.checkBox_D.setObjectName("checkBox_D")
        self.checkBox_T = QtWidgets.QCheckBox(self.widget)
        self.checkBox_T.setGeometry(QtCore.QRect(320, 10, 91, 19))
        self.checkBox_T.setObjectName("checkBox_T")
        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setGeometry(QtCore.QRect(10, 60, 72, 15))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.widget)
        self.label_5.setGeometry(QtCore.QRect(90, 60, 72, 15))
        self.label_5.setObjectName("label_5")
        self.label_7 = QtWidgets.QLabel(self.widget)
        self.label_7.setGeometry(QtCore.QRect(180, 60, 72, 15))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.widget)
        self.label_8.setGeometry(QtCore.QRect(260, 60, 72, 15))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.widget)
        self.label_9.setGeometry(QtCore.QRect(340, 60, 72, 15))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.widget)
        self.label_10.setGeometry(QtCore.QRect(440, 60, 72, 15))
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.widget)
        self.label_11.setGeometry(QtCore.QRect(520, 60, 72, 15))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.widget)
        self.label_12.setGeometry(QtCore.QRect(600, 60, 72, 15))
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.widget)
        self.label_13.setGeometry(QtCore.QRect(700, 60, 72, 15))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.widget)
        self.label_14.setGeometry(QtCore.QRect(790, 60, 72, 15))
        self.label_14.setObjectName("label_14")
        self.checkBox = QtWidgets.QCheckBox(self.widget)
        self.checkBox.setGeometry(QtCore.QRect(420, 10, 91, 19))
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(self.widget)
        self.checkBox_2.setGeometry(QtCore.QRect(520, 10, 91, 19))
        self.checkBox_2.setObjectName("checkBox_2")
        # MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        # MainWindow.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1135, 26))
        self.menubar.setObjectName("menubar")
        # MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # -----------------------显示车次信息的列表--------------------------------
        self.tableView.setObjectName("tableView")
        self.model = QStandardItemModel();  # 创建存储数据的模式
        # 根据空间自动改变列宽度并且不可修改列宽度
        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        # 设置表头不可见
        self.tableView.horizontalHeader().setVisible(False)
        # 纵向表头不可见
        self.tableView.verticalHeader().setVisible(False)
        # 设置表格内容文字大小
        font = QtGui.QFont()
        font.setPointSize(9)
        self.tableView.setFont(font)
        # 设置表格内容不可编辑
        self.tableView.setEditTriggers(QAbstractItemView.NoEditTriggers)

        MainWindow.setTabOrder(self.checkBox_G, self.checkBox_D)
        MainWindow.setTabOrder(self.checkBox_D, self.checkBox_Z)
        MainWindow.setTabOrder(self.checkBox_Z, self.checkBox_T)
        MainWindow.setTabOrder(self.checkBox_T, self.checkBox_K)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "出发地"))
        self.label_2.setText(_translate("MainWindow", "目的地"))
        self.label_6.setText(_translate("MainWindow", "选择车票"))
        self.label_3.setText(_translate("MainWindow", "日期"))
        self.lineEdit_3.setPlaceholderText(_translate("MainWindow", "输入要购买的车次"))
        self.pushButton_select.setText(_translate("MainWindow", "查询车票"))
        self.pushButton.setText(_translate("MainWindow", "购买车票"))
        self.checkBox_K.setText(_translate("MainWindow", "K快速"))
        self.checkBox_Z.setText(_translate("MainWindow", "Z直达"))
        self.checkBox_G.setText(_translate("MainWindow", "高铁"))
        self.checkBox_D.setText(_translate("MainWindow", "动车"))
        self.checkBox_T.setText(_translate("MainWindow", "T特快"))
        self.label_4.setText(_translate("MainWindow", "车次："))
        self.label_5.setText(_translate("MainWindow", "出发地："))
        self.label_7.setText(_translate("MainWindow", "目的地："))
        self.label_8.setText(_translate("MainWindow", "出发时间"))
        self.label_9.setText(_translate("MainWindow", "到达时间："))
        self.label_10.setText(_translate("MainWindow", "历时："))
        self.label_11.setText(_translate("MainWindow", "特务座："))
        self.label_12.setText(_translate("MainWindow", "一等座："))
        self.label_13.setText(_translate("MainWindow", "二等座："))
        self.label_14.setText(_translate("MainWindow", "其他："))
        self.checkBox.setText(_translate("MainWindow", "学生票"))
        self.checkBox_2.setText(_translate("MainWindow", "普通票"))


        self.pushButton_select.clicked.connect(self.on_click)  # 查询按钮指定单击事件的方法
        self.checkBox_G.stateChanged.connect(self.change_G)  # 高铁选中与取消事件
        self.checkBox_D.stateChanged.connect(self.change_D)  # 动车选中与取消事件
        self.checkBox_Z.stateChanged.connect(self.change_Z)  # 直达车选中与取消事件
        self.checkBox_T.stateChanged.connect(self.change_T)  # 特快车选中与取消事件
        self.checkBox_K.stateChanged.connect(self.change_K)  # 快车选中与取消事件
        self.pushButton.clicked.connect(self.buy_trick)

    def buy_trick(self):
        buy_trick_num = self.lineEdit_3.text()
        from_where = self.textEdit.toPlainText()
        to_where = self.textEdit_2.toPlainText()
        get_data = self.dateEdit.text()
        isStudent_trick = ''
        if self.checkBox.isChecked():
            isStudent_trick = '是'
        else:
            isStudent_trick = '否'
        print(isStudent_trick)
        t1 = MyThread(buy_trick_num, from_where, to_where, get_data, isStudent_trick)
        t1.start()

    def on_click(self):
        get_from = self.textEdit.toPlainText()  # 获取出发地
        get_to = self.textEdit_2.toPlainText()  # 获取到达地
        get_date = self.dateEdit.text()  # 获取出发时间
        print(get_from, get_to, get_date)
        if isStations():
            stations = eval(read())
            if get_from != "" and get_to != "" and get_date != "":

                if get_from in stations and get_to in stations:

                    inputYearDay = time.strptime(get_date, "%Y-%m-%d").tm_yday

                    yearToday = time.localtime(time.time()).tm_yday

                    timeDifference = inputYearDay - yearToday

                    if 0 <= timeDifference <= 28:
                        from_station = stations[get_from]
                        to_station = stations[get_to]
                        data = query(get_date, from_station, to_station)
                        self.checkBox_default()
                        if len(data) != 0:
                            self.displayTable(len(data), 10, data)
                        else:
                            self.messageDialog('警告', '没有返回的网络数据！')
                    else:
                        self.messageDialog('警告', '超出查询日期的范围内,不可查询昨天的车票信息,以及29天以后的车票信息！')
                else:
                    self.messageDialog('警告', '输入的站名不存在,或日期格式不正确！')
            else:
                self.messageDialog('警告', '请填写车站名称！')
        else:
            self.messageDialog('警告', '未下载车站查询文件！')

    # 将所有车次分类复选框取消勾选
    def checkBox_default(self):
        self.checkBox_G.setChecked(False)
        self.checkBox_D.setChecked(False)
        self.checkBox_Z.setChecked(False)
        self.checkBox_T.setChecked(False)
        self.checkBox_K.setChecked(False)

    # 高铁复选框事件处理
    def change_G(self, state):
        if state == QtCore.Qt.Checked:
            g_vehicle()
            self.displayTable(len(type_data), 10, type_data)
        else:
            r_g_vehicle()
            self.displayTable(len(type_data), 10, type_data)

    # 动车复选框事件处理
    def change_D(self, state):
        # 选中将动车信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取动车信息
            d_vehicle()
            # 通过表格显示该车型数据
            self.displayTable(len(type_data), 10, type_data)

        else:
            # 取消选中状态将移除该数据
            r_d_vehicle()
            self.displayTable(len(type_data), 10, type_data)

    # 直达复选框事件处理
    def change_Z(self, state):
        # 选中将直达车信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取直达车信息
            z_vehicle()
            self.displayTable(len(type_data), 10, type_data)
        else:
            # 取消选中状态将移除该数据
            r_z_vehicle()
            self.displayTable(len(type_data), 10, type_data)

    # 特快复选框事件处理
    def change_T(self, state):
        # 选中将特快车信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取特快车信息
            t_vehicle()
            self.displayTable(len(type_data), 10, type_data)
        else:
            # 取消选中状态将移除该数据
            r_t_vehicle()
            self.displayTable(len(type_data), 10, type_data)

    # 快速复选框事件处理
    def change_K(self, state):
        # 选中将快车信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取快速车信息
            k_vehicle()
            self.displayTable(len(type_data), 10, type_data)
        else:
            # 取消选中状态将移除该数据
            r_k_vehicle()
            self.displayTable(len(type_data), 10, type_data)

    # 显示消息提示框，参数title为提示框标题文字，message为提示信息
    def messageDialog(self, title, message):
        msg_box = QMessageBox(QMessageBox.Warning, title, message)
        msg_box.exec_()

    # 显示车次信息的表格
    # train参数为共有多少趟列车，该参数作为表格的行。
    # info参数为每趟列车的具体信息，例如有座、无座卧铺等。该参数作为表格的列
    def displayTable(self, train, info, data):
        self.model.clear()
        for row in range(train):
            for column in range(info):
                # 添加表格内容
                item = QStandardItem(data[row][column])
                # 向表格存储模式中添加表格具体信息
                self.model.setItem(row, column, item)
        # 设置表格存储数据的模式
        self.tableView.setModel(self.model)


# 显示主窗体
def show_MainWindow():
    app = QtWidgets.QApplication(sys.argv)  # 实例化QApplication,作为GUI主程序入口
    MainWindow = QtWidgets.QDialog()  # 创建QMainWindow
    ui = Ui_MainWindow()  # 实例UI类
    ui.setupUi(MainWindow)  # 设置窗体UI
    MainWindow.show()  # 显示窗体
    sys.exit(app.exec_())  # 当窗口创建完成后需要结束主循环


if __name__ == '__main__':
    if not isStations():  # 判断是否有所有车站的文件，没有就下载，有就直接显示窗体
        getStation()  # 下载所有车站文件
        show_MainWindow()  # 调用显示窗体的方法
    else:
        show_MainWindow()  # 调用显示窗体的方法
