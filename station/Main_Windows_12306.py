# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main_Windows_12306.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
import sys
import time

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *

from _12306.query_data import *


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1083, 834)
        self.toolButton = QtWidgets.QToolButton(Dialog)
        self.toolButton.setGeometry(QtCore.QRect(830, 650, 201, 141))
        self.toolButton.setObjectName("toolButton")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(830, 450, 201, 51))
        self.pushButton.setObjectName("pushButton")
        self.textBrowser = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser.setGeometry(QtCore.QRect(290, 440, 211, 311))
        self.textBrowser.setObjectName("textBrowser")
        self.dateEdit = QtWidgets.QDateEdit(Dialog)
        self.dateEdit.setGeometry(QtCore.QRect(640, 60, 121, 41))
        self.dateEdit.setObjectName("dateEdit")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(640, 20, 71, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(110, 30, 71, 21))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(280, 30, 72, 15))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(540, 410, 91, 21))
        self.label_4.setObjectName("label_4")
        self.checkBox = QtWidgets.QCheckBox(Dialog)
        self.checkBox.setGeometry(QtCore.QRect(110, 120, 91, 19))
        self.checkBox.setObjectName("checkBox")
        self.textBrowser_2 = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser_2.setGeometry(QtCore.QRect(520, 440, 256, 311))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.textBrowser_3 = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser_3.setGeometry(QtCore.QRect(50, 440, 211, 311))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.checkBox_2 = QtWidgets.QCheckBox(Dialog)
        self.checkBox_2.setGeometry(QtCore.QRect(190, 120, 91, 19))
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(Dialog)
        self.checkBox_3.setGeometry(QtCore.QRect(310, 120, 91, 19))
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_4 = QtWidgets.QCheckBox(Dialog)
        self.checkBox_4.setGeometry(QtCore.QRect(400, 20, 91, 19))
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_G = QtWidgets.QCheckBox(Dialog)
        self.checkBox_G.setGeometry(QtCore.QRect(400, 50, 91, 19))
        self.checkBox_G.setObjectName("checkBox_G")
        self.checkBox_6 = QtWidgets.QCheckBox(Dialog)
        self.checkBox_6.setGeometry(QtCore.QRect(400, 120, 91, 19))
        self.checkBox_6.setObjectName("checkBox_6")
        self.checkBox_Z = QtWidgets.QCheckBox(Dialog)
        self.checkBox_Z.setGeometry(QtCore.QRect(470, 50, 91, 19))
        self.checkBox_Z.setObjectName("checkBox_Z")
        self.checkBox_D = QtWidgets.QCheckBox(Dialog)
        self.checkBox_D.setGeometry(QtCore.QRect(400, 80, 91, 19))
        self.checkBox_D.setObjectName("checkBox_D")
        self.checkBox_T = QtWidgets.QCheckBox(Dialog)
        self.checkBox_T.setGeometry(QtCore.QRect(470, 80, 91, 19))
        self.checkBox_T.setObjectName("checkBox_T")
        self.checkBox_K = QtWidgets.QCheckBox(Dialog)
        self.checkBox_K.setGeometry(QtCore.QRect(550, 50, 91, 19))
        self.checkBox_K.setObjectName("checkBox_K")
        self.checkBox_11 = QtWidgets.QCheckBox(Dialog)
        self.checkBox_11.setGeometry(QtCore.QRect(550, 80, 91, 19))
        self.checkBox_11.setObjectName("checkBox_11")
        self.pushButton_select = QtWidgets.QPushButton(Dialog)
        self.pushButton_select.setGeometry(QtCore.QRect(830, 530, 201, 91))
        self.pushButton_select.setObjectName("pushButton_select")
        self.checkBox_12 = QtWidgets.QCheckBox(Dialog)
        self.checkBox_12.setGeometry(QtCore.QRect(860, 60, 91, 19))
        self.checkBox_12.setObjectName("checkBox_12")
        self.checkBox_13 = QtWidgets.QCheckBox(Dialog)
        self.checkBox_13.setGeometry(QtCore.QRect(860, 100, 91, 19))
        self.checkBox_13.setObjectName("checkBox_13")
        self.textBrowser_4 = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser_4.setGeometry(QtCore.QRect(50, 190, 681, 192))
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setGeometry(QtCore.QRect(60, 160, 72, 15))
        self.label_5.setObjectName("label_5")
        self.checkBox_14 = QtWidgets.QCheckBox(Dialog)
        self.checkBox_14.setGeometry(QtCore.QRect(860, 140, 91, 19))
        self.checkBox_14.setObjectName("checkBox_14")
        self.lineEdit_3 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_3.setGeometry(QtCore.QRect(850, 220, 161, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_6 = QtWidgets.QLabel(Dialog)
        self.label_6.setGeometry(QtCore.QRect(850, 190, 72, 15))
        self.label_6.setObjectName("label_6")
        self.verticalScrollBar = QtWidgets.QScrollBar(Dialog)
        self.verticalScrollBar.setGeometry(QtCore.QRect(710, 190, 21, 191))
        self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")
        self.textEdit = QtWidgets.QTextEdit(Dialog)
        self.textEdit.setGeometry(QtCore.QRect(90, 60, 101, 31))
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(Dialog)
        self.textEdit_2.setGeometry(QtCore.QRect(250, 60, 101, 31))
        self.textEdit_2.setObjectName("textEdit_2")

        self.retranslateUi(Dialog)
        self.pushButton_select.clicked.connect(self.on_click)
        self.checkBox_Z.stateChanged.connect(self.change_Z)
        self.checkBox_K.stateChanged.connect(self.change_K)
        self.checkBox_T.stateChanged.connect(self.change_T)
        self.checkBox_D.stateChanged.connect(self.change_D)
        self.checkBox_G.stateChanged.connect(self.change_G)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.toolButton.setText(_translate("Dialog", "开始抢票"))
        self.pushButton.setText(_translate("Dialog", "登录"))
        self.label.setText(_translate("Dialog", "日期"))
        self.label_2.setText(_translate("Dialog", "出发地"))
        self.label_3.setText(_translate("Dialog", "目的地"))
        self.label_4.setText(_translate("Dialog", "输出区"))
        self.checkBox.setText(_translate("Dialog", "全选"))
        self.checkBox_2.setText(_translate("Dialog", "商务/特等"))
        self.checkBox_3.setText(_translate("Dialog", "一等座"))
        self.checkBox_4.setText(_translate("Dialog", "全部"))
        self.checkBox_G.setText(_translate("Dialog", "高铁"))
        self.checkBox_6.setText(_translate("Dialog", "二等座"))
        self.checkBox_Z.setText(_translate("Dialog", "Z直达"))
        self.checkBox_D.setText(_translate("Dialog", "动车"))
        self.checkBox_T.setText(_translate("Dialog", "T特快"))
        self.checkBox_K.setText(_translate("Dialog", "K快速"))
        self.checkBox_11.setText(_translate("Dialog", "其他"))
        self.pushButton_select.setText(_translate("Dialog", "查询车票"))
        self.checkBox_12.setText(_translate("Dialog", "学生"))
        self.checkBox_13.setText(_translate("Dialog", "成人"))
        self.label_5.setText(_translate("Dialog", "当天车次"))
        self.checkBox_14.setText(_translate("Dialog", "儿童"))
        self.lineEdit_3.setPlaceholderText(_translate("Dialog", "输入要购买的车次"))
        self.label_6.setText(_translate("Dialog", "选择车票"))

    def on_click(self):
        get_from = self.textEdit.toPlainText()  # 获取出发地
        get_to = self.textEdit_2.toPlainText()  # 获取到达地
        get_date = self.dateEdit.text()  # 获取出发时间

        # 判断车站文件是否存在
        if isStations():
            stations = eval(read())  # 读取所有车站并转换为dic类型
            # 判断所有参数是否为空，出发地、目的地、出发日期
            if get_from != "" and get_to != "" and get_date != "":
                # 判断输入的车站名称是否存在，以及时间格式是否正确
                if get_from in stations and get_to in stations:
                    # 获取输入的日期是当前年初到现在一共过了多少天
                    inputYearDay = time.strptime(get_date, "%Y-%m-%d").tm_yday
                    # 获取系统当前日期是当前年初到现在一共过了多少天
                    yearToday = time.localtime(time.time()).tm_yday
                    # 计算时间差，也就是输入的日期减掉系统当前的日期
                    timeDifference = inputYearDay - yearToday
                    # 判断时间差为0时证明是查询当前的查票，
                    # 以及29天以后的车票。12306官方要求只能查询30天以内的车票
                    if 0 <= timeDifference <= 28:
                        from_station = stations[get_from]  # 在所有车站文件中找到对应的参数，出发地
                        to_station = stations[get_to]  # 目的地
                        data = query(get_date, from_station, to_station)  # 发送查询请求,并获取返回的信息
                        self.checkBox_default()  # 取消复选框状态
                        if len(data) != 0:  # 判断返回的数据是否为空
                            # 如果不是空的数据就将车票信息显示在表格中
                            self.displayTable(len(data), 16, data)
                        else:
                            self.messageDialog('警告', '没有返回的网络数据！')
                    else:
                        self.messageDialog('警告', '超出查询日期的范围内,不可查询昨天的车票信息,以及29天以后的车票信息！')
                else:
                    self.messageDialog('警告', '输入的站名不存在,或日期格式不正确！')
            else:
                self.messageDialog('警告', '请填写车站名称！')
        else:
            self.messageDialog('警告', '未下载车站查询文件！')
    # 将所有车次分类复选框取消勾选
    def checkBox_default(self):
        self.checkBox_G.setChecked(False)
        self.checkBox_D.setChecked(False)
        self.checkBox_Z.setChecked(False)
        self.checkBox_T.setChecked(False)
        self.checkBox_K.setChecked(False)

    # 高铁复选框事件处理
    def change_G(self, state):
        # 选中将高铁信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取高铁信息
            g_vehicle()
            # 通过表格显示该车型数据
            self.displayTable(len(type_data), 16, type_data)
        else:
            # 取消选中状态将移除该数据
            r_g_vehicle()
            self.displayTable(len(type_data), 16, type_data)

    # 动车复选框事件处理
    def change_D(self, state):
        # 选中将动车信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取动车信息
            d_vehicle()
            # 通过表格显示该车型数据
            self.displayTable(len(type_data), 16, type_data)

        else:
            # 取消选中状态将移除该数据
            r_d_vehicle()
            self.displayTable(len(type_data), 16, type_data)

    # 直达复选框事件处理
    def change_Z(self, state):
        # 选中将直达车信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取直达车信息
            z_vehicle()
            self.displayTable(len(type_data), 16, type_data)
        else:
            # 取消选中状态将移除该数据
            r_z_vehicle()
            self.displayTable(len(type_data), 16, type_data)

    # 特快复选框事件处理
    def change_T(self, state):
        # 选中将特快车信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取特快车信息
            t_vehicle()
            self.displayTable(len(type_data), 16, type_data)
        else:
            # 取消选中状态将移除该数据
            r_t_vehicle()
            self.displayTable(len(type_data), 16, type_data)

    # 快速复选框事件处理
    def change_K(self, state):
        # 选中将快车信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取快速车信息
            k_vehicle()
            self.displayTable(len(type_data), 16, type_data)
        else:
            # 取消选中状态将移除该数据
            r_k_vehicle()
            self.displayTable(len(type_data), 16, type_data)

    # 显示消息提示框，参数title为提示框标题文字，message为提示信息
    def messageDialog(self, title, message):
        msg_box = QMessageBox(QMessageBox.Warning, title, message)
        msg_box.exec_()

    # 显示车次信息的表格
    # train参数为共有多少趟列车，该参数作为表格的行。
    # info参数为每趟列车的具体信息，例如有座、无座卧铺等。该参数作为表格的列
    def displayTable(self, train, info, data):
        self.model.clear()
        for row in range(train):
            for column in range(info):
                # 添加表格内容
                item = QStandardItem(data[row][column])
                # 向表格存储模式中添加表格具体信息
                self.model.setItem(row, column, item)
        # 设置表格存储数据的模式
        self.tableView.setModel(self.model)

# 显示主窗体
def show_MainWindow():
    app = QtWidgets.QApplication(sys.argv)  # 实例化QApplication,作为GUI主程序入口
    MainWindow = QtWidgets.QDialog()  # 创建QMainWindow
    ui = Ui_Dialog()  # 实例UI类
    ui.setupUi(MainWindow)  # 设置窗体UI
    MainWindow.show()  # 显示窗体
    sys.exit(app.exec_())  # 当窗口创建完成后需要结束主循环

if __name__ == '__main__':
    if not isStations():  # 判断是否有所有车站的文件，没有就下载，有就直接显示窗体
        getStation()  # 下载所有车站文件
        show_MainWindow()  # 调用显示窗体的方法
    else:
        show_MainWindow()  # 调用显示窗体的方法
